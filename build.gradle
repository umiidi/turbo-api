import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.bmuschko.docker-remote-api' version '6.6.1' apply true
}

group = 'az.ingress'
//version = '0.0.1-SNAPSHOT'
def hash = 'git rev-parse --short HEAD'.execute().text.trim()
version = "$projectVersion.$hash"

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    //    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation "org.modelmapper:modelmapper:3.1.1"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task createDockerFile(type: Dockerfile, dependsOn: assemble) {
    destFile.set(project.file('Dockerfile'))
    from "alpine:$alpineVersion"
    runCommand 'apk add --no-cache openjdk17'
    copyFile "build/libs/${project.name}-${project.version}.jar", "/app/${project.name}-${project.version}.jar"
    workingDir '/app'
    entryPoint 'java'
    defaultCommand '-jar', "${project.name}-${project.version}.jar"
}

task dockerBuild(type: DockerBuildImage, dependsOn: createDockerFile) {
    inputDir.set(file("$projectDir/."))

    doLast {
        println("creatig image: $dockerRepoUrl/${project.name}:$version")
    }

    images.add("$dockerRepoUrl/${project.name}:$version")
}

task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
    images.add("$dockerRepoUrl/${project.name}:$version")

    registryCredentials.setUsername("$dockerHubUsername")
    registryCredentials.setPassword("$dockerHubPassword")
    registryCredentials.setEmail("$dockerHubEmail")
}

task updateDockerCompose(dependsOn: dockerPush) {
    doLast {
        def newImageTag = "$dockerRepoUrl/${project.name}:$version"
        def composeFile = file('../docker-compose.yaml')
        def content = composeFile.text
        content = content.replaceFirst(/(${dockerRepoUrl}\/${project.name}:)\S+/, "${newImageTag}")
        composeFile.text = content
    }
}